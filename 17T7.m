AttachSpec("spec");

ComputeLvalues := false;
cores := 24;

if ComputeLvalues then
  eigenvalues_dir := "../EichlerShimuraHMF-eigenvalues/";
  label := "2.2.12.1-578.1-c";
  B := 25;
  f := LMFDBHMFwithEigenvalues(label, eigenvalues_dir);
  maxn := NormBoundOnComputedEigenvalues(f);
  time possible_zs := ComputePossibleModuliPoints(cores, label, eigenvalues_dir, B : maxn:=400000);
  _<I> := Universe(possible_zs[1,1]);
  OH := Integers(HeckeEigenvalueField(Parent(f)));
else
  _<I> := ComplexFieldExtra(85);

  possible_zs := [ PowerSequence(PowerSequence(ComplexField(85))) |
  [ PowerSequence(ComplexField(85)) |
  [ ComplexField(85) |
  2.782906766939281866286997098793034902684847793476160747541940388977040015293085779903p85*I,
  0.7541581715676831945358505929000519382740764490517232237587776084375822688125537085498p85*I,
  1.427741289884804796261342526038346079673690287432208818191983875543595519551820976113p85*I,
  5.044828437439746283467218454713589608799941187512688000112646894245916708603880833717p85*I ],
  [ ComplexField(85) |
  0.7541581715676831945358505929000519382740764490517232237587776084375822688125537085498p85*I,
  2.782906766939281866286997098793034902684847793476160747541940388977040015293085779903p85*I,
  5.044828437439746283467218454713589608799941187512688000112646894245916708603880833717p85*I,
  1.427741289884804796261342526038346079673690287432208818191983875543595519551820976113p85*I ]
  ]
  ];
  OH := Integers(NumberField(Polynomial([-25, 25, 20, -10, 1])));
end if;


z0 := possible_zs[1,1];
twoz0 := IsogenousModuli(z0, 2*OH);
// Filter by vanishing of Schottky Modular Form
S := [Abs(EvaluateSchottkyModularForm(SmallPeriodMatrix(z, 1*OH, 1*OH)))  : z in twoz0 ];
ParallelSort(~S, ~twoz0);
// Take the smallest one
g := TwoTorsionPolynomial(twoz0[1], 1*OH, 1*OH);

// Sanity check that the second pair gives the same two-isogeny polynomial
z1 := possible_zs[1,2];
twoz1 := IsogenousModuli(z1, 2*OH);
// Filter by vanishing of Schottky Modular Form
S1 := [Abs(EvaluateSchottkyModularForm(SmallPeriodMatrix(z, 1*OH, 1*OH)))  : z in twoz1 ];
ParallelSort(~S1, ~twoz1);
// Take the smallest one
g1 := TwoTorsionPolynomial(twoz1[1], 1*OH, 1*OH);
// we get identical polynomials
[RealField(1) ! Abs(c - Coefficients(g1)[i])/Abs(c) : i->c in Coefficients(g)];



b, rat_coeffs, _, scalar := RationalReconstructPolynomial(g);
rat_coeffs;
assert #rat_coeffs ge 5;

vr :=  Vector(Reverse(rat_coeffs)[2..5]);
function two_torsion_wrapper(inp)
  twopol := TwoTorsionPolynomial(Eltseq(inp), 1*OH, 1*OH);
  coeffs := Vector(Reverse(Coefficients(twopol))[2..5]);
  return coeffs - vr;
end function;
CCextra := ComplexField(300);
V := VectorSpace(CCextra, 4);
two_torsion_scaled := map<V -> V | x :-> two_torsion_wrapper(x)>;
// SetVerbose("NumericalSolve", 1);
time y := Broyden(two_torsion_scaled, V!twoz0[1], 1e-250);
g := TwoTorsionPolynomial(Eltseq(y), 1*OH, 1*OH);
b, gQQ, maxe, scalar := RationalReconstructPolynomial(g);
assert b;
assert Coefficients(gQQ) eq [ -153702846916677613155795943357742165422510948268638711068705007746571496028603153721820676930915397756767880953158680956518300208564857528475846115713306206121744371229070553804786322858745628675977314304/178965658172563505691567430075544878522333588857409806561529021061080374369556513280636578364954260954053574977695827022683810232102249836987489, 1146577926305752420477535869691244180173324314702752763907657433315107121263204742768888962771197251376625104206711589309421899039873016393215020276698874670562373997956576616071341814795060737/670094710948450268289701728413190215082606907785612246721180661542819708445289847520929878602657594701563494948853994819278052135585281, -9852137576523849313573798808512221401725696445103153165477184814708121487437051950846916054338079399077412734440084548822597041584264050257319198033730625206864871584615124593064464/2509011651878614998797217754126705111558337749420696787881394775202106896149862017014879726997973348475400552676815847373958049, -596429810189571539092424587827714193967396437508823955345259416828275087912084488628324277593684785211551833940814243682069785290747151829840348448234364703290660905290120/9394402561919243787119789313422488601171072363603734302537855083046327291287278065954831341875789839808733969861555521, -14061880588126294527392674010689938308443088943468198102811018325346479579955044946991705051531183802990148018229606149081839249063521476069415674226588238236720/35175125404186279058836013741968234423062641078413898907007169517306669910924134118791220691414370460657591009, 227651046709591445539046912700601497731527355420174139738566662730297758344011575853851511331440431776466411344978516156622740858160708887815537948/131704963572207939176988833963700438295192620765182025989870924755669329599578514612083689035929695361, -232197539800091617231639561967063664352188057496476072931698092764485583462229908918881797598814200144333393222178506301849346656620565264/493138183026696649500159387575639569454667726018295718048842364509256678967330409560027982369, -1112495315379430476223810236241688246779979489984666086829486227316120659527165531615100362966381215169877309970692459565752/1846439655446578223451987734492979276012992903950182347535432485336203902083201188801, -1619863448719805208926780515350865570162039546303761900364002702849905312182988260171192716775227122240325604581040/6913557940860380859487494078841074424305589052908854838299971216478773068129, -2005176181645532774533740513783365112330412661637656531263872492422318138415878775076136452851181992890/25886187648018977232164529974859154443914585907867963712867560579841, -1770863661928284803713567743362051511470304070815670165425643871240590168197004899614562992/96924726266929656916793076988969927203957272073720802224289, -1814416503358004575011887633363669311563353153960463604533351275745379344187064/362911784835113806168903246070659332631395890172481, -1148273598471179728781481033200461057071613065513809470959738416912/1358837611875156413994081366922805663866849, -366800840143173954605482375177978351855973622141128420/5087847054306858508415214620430721, -56358325729359601656637373021434035279920/19050243694900960667051809, -3903775123456327337126372744/71329145896378561, -155176125916688/267075169, 1 ];

gabs := Polredabs(gQQ);
assert Eltseq(gabs) eq [ -490, -1013, -496, -1376, 80, 2146, -604, 2024, -886, 705, -500, 200, -160, 60, -28, 12, -2, 1 ];
gabs;



